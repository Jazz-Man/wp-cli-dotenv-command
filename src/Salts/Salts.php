<?php

namespace WP_CLI_Dotenv\Salts;

use Exception;
use Illuminate\Support\Collection;

class Salts
{
    /**
     * Pattern to match both key and value from php define statements.
     */
    const PATTERN_CAPTURE = '#\'([^\']+)\'#';

    /**
     * Resource to load salts from.
     * @var string
     */
    protected $source;

    /**
     * Salts constructor.
     *
     * @param string $source
     */
    public function __construct($source = 'https://api.wordpress.org/secret-key/1.1/salt/')
    {
        $this->source = $source;
    }

    /**
     * Get a fresh set of salts as a collection.
     *
     * @return Collection
     */
    public function collect()
    {
        return new Collection($this->fetch_array());
    }

    /**
     * Fetch the salts from the generator and return the parsed response.
     *
     * @throws Exception
     *
     * @return array|void
     */
    protected function fetch_array()
    {
        // read in each line as an array
        $response = file($this->source);

        $parsed = (array) $this->parse_salts_from_php($response);

        if (! array_filter($parsed)) {
            throw new Exception('There was a problem fetching salts from the WordPress generator service.');
        }

        return $parsed;
    }

    /**
     * Parse the php generated by the WordPress.org salts generator to an array of key => value pairs
     *
     * @param $php array of lines
     *
     * @return array
     */
    protected function parse_salts_from_php(array $php)
    {
        return array_map(function ($line) {
            // capture everything between single quotes
            preg_match_all(self::PATTERN_CAPTURE, $line, $matches);
            // matches[x]
            //   0 - complete match
            //   1 - captures
            return $matches[ 1 ];
        }, $php);
    }
}
